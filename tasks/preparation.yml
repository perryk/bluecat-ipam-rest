---
# Acquires a static IP address from Bluecat Address Manager 
# via REST API and creates a DNS entry.  
# Pull back existing IP if host record already exists

# This actually now just does the preparation stage by gathering ID's etc
# It has been split so that this role can be used to loop over many records wanting to be added to bluecat
# It will prepare first, then do each record, then clean up.

- name: Get API Token (expires 5 minutes by default)
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/login?username={{ bluecat_username }}&password={{ bluecat_password }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  no_log: true                # Don't show output as your password will be on the URI string
  register: api_token_output

- name: Set fact for Bluecat Token
  set_fact: 
    api_token: "{{ api_token_output.content | regex_replace('\"Session Token-> ', '') | regex_replace(' <- for User : .*', '')}}"

- name: Get ID of Configuration entity
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId=0&name={{ bluecat_configuration_name }}&type=Configuration"
    headers: 
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: config_output

- name: Set config fact
  set_fact:
    configurationId: "{{ config_output.json.id }}"
 
- name: Fail if configuration not found
  fail:
    msg: "Configuration ID not found for name <{{ bluecat_configuration_name }}>"
  when: "configurationId == '0'"

- debug: 
    msg: "Config ID is {{ configurationId }}"

- name: Get ID of your view
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId={{ configurationId }}&name={{ bluecat_dns_view }}&type=View"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: view_output

- name: Set view fact
  set_fact:
    viewId: "{{ view_output.json.id }}"

- name: Fail if view not found
  fail:
    msg: "View ID not found for name <{{ bluecat_dns_view }}>"
  when: "viewId == '0'"

- debug:
    msg: "View ID is {{ viewId }}"

